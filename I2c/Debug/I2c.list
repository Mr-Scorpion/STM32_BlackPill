
I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000500  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800050c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800050c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000137c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052e  00000000  00000000  000213f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014c  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013acd  00000000  00000000  00021c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021c6  00000000  00000000  00035719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007dadf  00000000  00000000  000378df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000594  00000000  00000000  000b53c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b5954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004e8 	.word	0x080004e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004e8 	.word	0x080004e8

080001d4 <delay>:
#define SLAVE_ADDRESS 0x52  // 7-bit slave address
uint8_t dataBuffer[] = { 0xA5, 0x5A, 0xFF };  // Example data to transmit
#define DATA_COUNT (sizeof(dataBuffer)/sizeof(dataBuffer[0]))

// Simple delay function
void delay(volatile uint32_t count) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    while(count--);
 80001dc:	bf00      	nop
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	1e5a      	subs	r2, r3, #1
 80001e2:	607a      	str	r2, [r7, #4]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1fa      	bne.n	80001de <delay+0xa>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
	...

080001f8 <I2C1_Init>:

void I2C1_Init(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    // 1. Enable clock for GPIOB and I2C1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;   // Enable GPIOB clock
 80001fc:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <I2C1_Init+0xd8>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a33      	ldr	r2, [pc, #204]	; (80002d0 <I2C1_Init+0xd8>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;      // Enable I2C1 clock
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <I2C1_Init+0xd8>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a30      	ldr	r2, [pc, #192]	; (80002d0 <I2C1_Init+0xd8>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40

    // 2. Configure GPIOB Pins 8 (SCL) and 9 (SDA) for Alternate Function
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);            // Clear mode
 8000214:	4b2f      	ldr	r3, [pc, #188]	; (80002d4 <I2C1_Init+0xdc>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2e      	ldr	r2, [pc, #184]	; (80002d4 <I2C1_Init+0xdc>)
 800021a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800021e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1);           // Alternate function
 8000220:	4b2c      	ldr	r3, [pc, #176]	; (80002d4 <I2C1_Init+0xdc>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2b      	ldr	r2, [pc, #172]	; (80002d4 <I2C1_Init+0xdc>)
 8000226:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800022a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_9);                // Open-drain
 800022c:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <I2C1_Init+0xdc>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <I2C1_Init+0xdc>)
 8000232:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000236:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);              // Clear pull-up/down
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <I2C1_Init+0xdc>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <I2C1_Init+0xdc>)
 800023e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000242:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0);             // Pull-up
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <I2C1_Init+0xdc>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <I2C1_Init+0xdc>)
 800024a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800024e:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL8_Pos) | (4 << GPIO_AFRH_AFSEL9_Pos); // AF4 for I2C
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <I2C1_Init+0xdc>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <I2C1_Init+0xdc>)
 8000256:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800025a:	6253      	str	r3, [r2, #36]	; 0x24

    // 3. Software reset the I2C peripheral
    I2C1->CR1 |= I2C_CR1_SWRST;
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <I2C1_Init+0xe0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <I2C1_Init+0xe0>)
 8000262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000266:	6013      	str	r3, [r2, #0]
    delay(1000);  // Short delay
 8000268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026c:	f7ff ffb2 	bl	80001d4 <delay>
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000270:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <I2C1_Init+0xe0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <I2C1_Init+0xe0>)
 8000276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800027a:	6013      	str	r3, [r2, #0]

    // 4. Configure I2C clock frequency
    I2C1->CR2 = (I2C1->CR2 & ~I2C_CR2_FREQ) | 16; // APB1 = 16 MHz
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <I2C1_Init+0xe0>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <I2C1_Init+0xe0>)
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6053      	str	r3, [r2, #4]

    // 5. Configure Clock Control Register (CCR) for 100 kHz standard mode
    // CCR = APB1_FREQ/(2 * I2C_FREQ)
    I2C1->CCR &= ~I2C_CCR_CCR;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <I2C1_Init+0xe0>)
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <I2C1_Init+0xe0>)
 8000292:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= (uint32_t)(16e6 / (2 * 100e3));  // Explicitly cast to uint32_t
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <I2C1_Init+0xe0>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <I2C1_Init+0xe0>)
 80002a2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80002a6:	61d3      	str	r3, [r2, #28]

    // 6. Configure maximum rise time
    // For standard mode, TRISE = (maximum_rise_time_ns / APB1_period_ns) + 1
    // APB1 period = 1/(16MHz) ~ 62.5 ns, maximum rise time = 1000 ns
    I2C1->TRISE = (1000 / 62) + 1;  // (You can fine-tune this value)
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <I2C1_Init+0xe0>)
 80002aa:	2211      	movs	r2, #17
 80002ac:	621a      	str	r2, [r3, #32]

    // 7. Set own address (for slave mode if needed)
    I2C1->OAR1 = (SLAVE_ADDRESS << 1);  // Set the 7-bit address shifted left by 1
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <I2C1_Init+0xe0>)
 80002b0:	22a4      	movs	r2, #164	; 0xa4
 80002b2:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 |= (1 << 15);             // Enable the own address by setting OA1EN (bit 15)
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <I2C1_Init+0xe0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <I2C1_Init+0xe0>)
 80002ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002be:	6093      	str	r3, [r2, #8]

    // 8. Enable I2C peripheral
    I2C1->CR1 |= I2C_CR1_PE;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <I2C1_Init+0xe0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <I2C1_Init+0xe0>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40005400 	.word	0x40005400

080002dc <I2C1_Transmit>:

void I2C1_Transmit(uint8_t slave_addr, uint8_t *data, uint32_t size) {
 80002dc:	b480      	push	{r7}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	73fb      	strb	r3, [r7, #15]
    uint32_t index = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

    // 1. Wait for the bus to be free (check BUSY bit)
    while (I2C1->SR2 & I2C_SR2_BUSY);
 80002ee:	bf00      	nop
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <I2C1_Transmit+0xb4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f9      	bne.n	80002f0 <I2C1_Transmit+0x14>

    // 2. Generate START condition
    I2C1->CR1 |= I2C_CR1_START;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <I2C1_Transmit+0xb4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <I2C1_Transmit+0xb4>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6013      	str	r3, [r2, #0]

    // 3. Wait until START condition is generated (check SB flag in SR1)
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000308:	bf00      	nop
 800030a:	4b21      	ldr	r3, [pc, #132]	; (8000390 <I2C1_Transmit+0xb4>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <I2C1_Transmit+0x2e>

    // 4. Send slave address with write bit (LSB = 0)
    I2C1->DR = (slave_addr << 1);  // Write mode: LSB=0
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	005a      	lsls	r2, r3, #1
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <I2C1_Transmit+0xb4>)
 800031c:	611a      	str	r2, [r3, #16]

    // 5. Wait until address is sent and ACK received (ADDR flag set)
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800031e:	bf00      	nop
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <I2C1_Transmit+0xb4>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f003 0302 	and.w	r3, r3, #2
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0f9      	beq.n	8000320 <I2C1_Transmit+0x44>

    // 6. Clear ADDR flag by reading SR1 then SR2
    volatile uint32_t temp = I2C1->SR1;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <I2C1_Transmit+0xb4>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	613b      	str	r3, [r7, #16]
    temp = I2C1->SR2;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <I2C1_Transmit+0xb4>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	613b      	str	r3, [r7, #16]
    (void)temp;  // Prevent compiler warning
 8000338:	693b      	ldr	r3, [r7, #16]

    // 7. Transmit data bytes
    for (index = 0; index < size; index++) {
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	e00f      	b.n	8000360 <I2C1_Transmit+0x84>
        // Write data byte to DR
        I2C1->DR = data[index];
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	4413      	add	r3, r2
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <I2C1_Transmit+0xb4>)
 800034a:	611a      	str	r2, [r3, #16]

        // Wait until TXE flag is set indicating DR is empty
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 800034c:	bf00      	nop
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <I2C1_Transmit+0xb4>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <I2C1_Transmit+0x72>
    for (index = 0; index < size; index++) {
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	3301      	adds	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	697a      	ldr	r2, [r7, #20]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3eb      	bcc.n	8000340 <I2C1_Transmit+0x64>
    }

    // 8. Wait until the last byte transfer is complete (BTF flag)
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000368:	bf00      	nop
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <I2C1_Transmit+0xb4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C1_Transmit+0x8e>

    // 9. Generate STOP condition
    I2C1->CR1 |= I2C_CR1_STOP;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <I2C1_Transmit+0xb4>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <I2C1_Transmit+0xb4>)
 800037c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000380:	6013      	str	r3, [r2, #0]
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40005400 	.word	0x40005400

08000394 <main>:

int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    // Initialize I2C1 peripheral
    I2C1_Init();
 8000398:	f7ff ff2e 	bl	80001f8 <I2C1_Init>

    // Transmit dataBuffer to the slave device with address SLAVE_ADDRESS
    I2C1_Transmit(SLAVE_ADDRESS, dataBuffer, DATA_COUNT);
 800039c:	2203      	movs	r2, #3
 800039e:	4902      	ldr	r1, [pc, #8]	; (80003a8 <main+0x14>)
 80003a0:	2052      	movs	r0, #82	; 0x52
 80003a2:	f7ff ff9b 	bl	80002dc <I2C1_Transmit>

    while (1) {
 80003a6:	e7fe      	b.n	80003a6 <main+0x12>
 80003a8:	20000000 	.word	0x20000000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler+0x4>

080003be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <UsageFault_Handler+0x4>

080003ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f8:	f000 f83e 	bl	8000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}

08000400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SystemInit+0x20>)
 8000406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <SystemInit+0x20>)
 800040c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000440:	4c0b      	ldr	r4, [pc, #44]	; (8000470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800044e:	f7ff ffd7 	bl	8000400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 f825 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000456:	f7ff ff9d 	bl	8000394 <main>
  bx  lr    
 800045a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800045c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000468:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 800046c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000470:	20000024 	.word	0x20000024

08000474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_IncTick+0x20>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_IncTick+0x24>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4413      	add	r3, r2
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_IncTick+0x24>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000003 	.word	0x20000003
 800049c:	20000020 	.word	0x20000020

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	4d0d      	ldr	r5, [pc, #52]	; (80004d8 <__libc_init_array+0x38>)
 80004a4:	4c0d      	ldr	r4, [pc, #52]	; (80004dc <__libc_init_array+0x3c>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	2600      	movs	r6, #0
 80004ac:	42a6      	cmp	r6, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	4d0b      	ldr	r5, [pc, #44]	; (80004e0 <__libc_init_array+0x40>)
 80004b2:	4c0c      	ldr	r4, [pc, #48]	; (80004e4 <__libc_init_array+0x44>)
 80004b4:	f000 f818 	bl	80004e8 <_init>
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	2600      	movs	r6, #0
 80004be:	42a6      	cmp	r6, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c8:	4798      	blx	r3
 80004ca:	3601      	adds	r6, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d2:	4798      	blx	r3
 80004d4:	3601      	adds	r6, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
